webpackJsonp([2],{0:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _jquery = __webpack_require__(1);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _showcase = __webpack_require__(48);\n\nvar _showcase2 = _interopRequireDefault(_showcase);\n\nvar _terminal = __webpack_require__(47);\n\nvar _terminal2 = _interopRequireDefault(_terminal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_jquery2.default.then(function ($) {\n    /*\n     * termSwitch\n     * Switches terminal with image and vise versa\n     *\n     * @param {Object} $c - terminal app-display__image jQuery object\n     * @param {Boolean} i - true if image should be visible\n     * @return {Void}\n     */\n    var termSwitch = function termSwitch($c, i) {\n        if (i) {\n            $('.pantheon', $c).hide();\n            $('.pantheon--fallback', $c).show();\n        } else {\n            $('.pantheon--fallback', $c).hide();\n            $('.pantheon', $c).show();\n        }\n    };\n\n    /**\n     * termLock\n     * Determins if the terminal will be locked and switches if needed\n     *\n     * @param {Terminal} t - terminal class\n     * @return {Boolean} - true if terminal image is shown, false if interactive\n     */\n    var termLock = function termLock(t) {\n        var $c = t.$w.parents('.app-display__image');\n        var w = $(window).innerWidth() <= 1000;\n\n        termSwitch($c, w);\n        t.onHold = w;\n        return w;\n    };\n\n    $(document).ready(function () {\n        var showcase = new _showcase2.default({\n            container: '#showcase',\n            index: '#showcase-index',\n            slides: ['showcase-music', 'showcase-epiphany', 'showcase-mail', 'showcase-photos', 'showcase-videos', 'showcase-calendar', 'showcase-files', 'showcase-terminal', 'showcase-scratch', 'showcase-camera'],\n            fixed: false\n        });\n        showcase.start();\n\n        $('#showcase .showcase-tab .showcase-back').on('click', function (e) {\n            e.preventDefault();\n            showcase.slideTo('index');\n        });\n\n        var terminal = new _terminal2.default();\n        terminal.start();\n        termLock(terminal);\n\n        $('#showcase').on('change', function (e, d) {\n            if (d != null && d.active === 'showcase-terminal') {\n                termLock(terminal);\n            } else {\n                terminal.onHold = true;\n            }\n        });\n\n        $(window).on('resize', function () {\n            return termLock(terminal);\n        });\n\n        console.log('Loaded showcase.run.js');\n    });\n}); /**\n     * _scripts/showcase.run.js\n     * Loads the homepage showcase and other related widgets\n     */\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/showcase.run.js\n ** module id = 0\n ** module chunks = 2\n **/\n//# sourceURL=webpack:///./_scripts/showcase.run.js?")},47:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nscripts/widgets/pantheon/terminal.js\nreates a realistic terminal designed to mimic pantheon-terminal\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nexports {Class} default - Creates a realistic terminal\nn\nvar _promise = __webpack_require__(2);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Here lies some basic commands that are included by default\n *\n * @param {String} cmd - command ran\n * @param {Object} term - terminal object\n * @returns {Number} exit code for command\n */\nvar commands = {};\n\ncommands[/^clear/] = function (cmd, term) {\n    return new _promise2.default(function (resolve, reject) {\n        term.history = [];\n        term.$i.text('');\n        return resolve(0);\n    });\n};\n\ncommands[/^exit/] = function (cmd, term) {\n    return new _promise2.default(function (resolve, reject) {\n        window.history.back();\n        return resolve(0);\n    });\n};\n\ncommands[/^whoami$/] = function (cmd, term) {\n    if (term.user === 'groot') {\n        return term.append('i am groot').then(function () {\n            return 0;\n        });\n    } else {\n        return term.append(term.user).then(function () {\n            return 0;\n        });\n    }\n};\n\ncommands[/^USER=/] = function (cmd, term) {\n    return new _promise2.default(function (resolve, reject) {\n        var userCMD = cmd.split('=')[1];\n        if (userCMD == null || userCMD === '') return resolve(0);\n\n        var user = userCMD.split(' ')[0];\n        if (user == null || userCMD === '') return resolve(0);\n\n        term.user = user;\n        return resolve(0);\n    });\n};\n\ncommands[/^rm -rf \\/$/] = function (cmd, term) {\n    return term.append('no.').then(function () {\n        return 0;\n    });\n};\n\ncommands[/^cd/] = function (cmd, term) {\n    return new _promise2.default(function (resolve, reject) {\n        var split = cmd.split(' ');\n\n        if (split[1] == null) return resolve(0);\n        if (split[1] === '.' || split[1] === '~' || split[1] === './') return resolve(0);\n\n        return resolve(term.append('I\\'m sorry, ' + term.user + '. I\\'m afraid I can\\'t do that.')).then(function () {\n            return 1;\n        });\n    });\n};\n\ncommands[/^echo/] = function (cmd, term) {\n    return new _promise2.default(function (resolve, reject) {\n        var text = cmd.match(/([\"'])[^]*?\\1/)[0];\n\n        return resolve(term.append(text.substring(1, text.length - 1))).then(function () {\n            return 0;\n        });\n    });\n};\n\ncommands[/^mkdir .\\/website$/] = function (cmd, term) {\n    return 0;\n};\n\ncommands[/^rm -rf .\\/website$/] = function (cmd, term) {\n    return 0;\n};\n\ncommands[/^git clone https:\\/\\/github.com\\/elementary\\/website.git$/] = function (cmd, term) {\n    return term.append('Cloning into \\'/home/' + term.user + '/mvp\\'...', 300).then(function () {\n        return term.append('remote: Counting objects: 20257, done.', 100);\n    }).then(function () {\n        return term.append('remote: Compressing objects: 0% (0/29)').then(function ($l) {\n            return new _promise2.default(function (resolve, reject) {\n                var t = 0;\n\n                var _loop = function _loop(i) {\n                    setTimeout(function () {\n                        $l.text('remote: Compressing objects: ' + Math.floor(i / 29 * 100) + '% (' + i + '/29)' + (i === 29 ? ', done.' : ''));\n                    }, t);\n\n                    t += Math.floor(Math.random() * 75);\n                };\n\n                for (var i = 0; i <= 29; i++) {\n                    _loop(i);\n                }\n\n                setTimeout(function () {\n                    return resolve();\n                }, t);\n            });\n        });\n    }).then(function () {\n        return term.append('Receiving objects: 0% (0/20257), 0MiB | 0 MiB/s').then(function ($l) {\n            return new _promise2.default(function (resolve, reject) {\n                var t = 0;\n\n                var _loop2 = function _loop2(_i) {\n                    setTimeout(function () {\n                        $l.text('Receiving objects: ' + Math.floor(_i / 20257 * 100) + '% (' + _i + '/20257), ' + Math.floor(_i / t * 4) + 'MiB | 1.21 GW/s' + (_i === 20257 ? ', done.' : ''));\n                    }, t);\n\n                    _i += Math.floor(Math.random() * 50);\n                    t += Math.random() * 10;\n                    i = _i;\n                };\n\n                for (var i = 0; i <= 20257; i++) {\n                    _loop2(i);\n                }\n\n                setTimeout(function () {\n                    $l.text('Receiving objects: 100% (20257/20257), 21MiB | 1.21 GW/s, done.');\n                    return resolve();\n                }, t);\n            });\n        });\n    }).then(function () {\n        return term.append('Receiving deltas: 100% (13052/13052), done.', Math.random() * 800);\n    }).then(function () {\n        return term.append('Checking connectivity... done', Math.random() * 600);\n    }).then(function () {\n        return 0;\n    });\n};\n\n// A rather special command that runs other commands\ncommands[/^\\.\\/demo$/] = function (cmd, term) {\n    term.prompt();\n\n    return term.type('rm -rf ./website').then(function () {\n        return term.type('git clone https://github.com/elementary/website.git');\n    }).then(function () {\n        return term.type('./demo');\n    });\n};\n\n/**\n * default\n * A showcase slider for elementary homepage.\n *\n * @param {String} w - jQuery selector the terminal window\n */\n\nvar Terminal = function () {\n\n    /**\n     * constructor\n     * Creates a new Showcase\n     *\n     * @param {String} w - jQuery selector the terminal window\n     */\n    function Terminal() {\n        var w = arguments.length <= 0 || arguments[0] === undefined ? '.window[type=\"terminal\"]' : arguments[0];\n\n        _classCallCheck(this, Terminal);\n\n        this.w = w;\n        this.title = 'Home';\n        this.user = 'ellie';\n        this.host = 'elementary';\n        this.folder = '/home/' + this.user;\n\n        this.history = [];\n\n        // terminal colors by index\n        this.colors = ['#073642', '#dc322f', '#859900', '#b58900', '#268bd2', '#ec0048', '#2aa198', '#94a3a5'];\n\n        // avalible commands to this terminal\n        this.commands = commands;\n\n        this.$w = $(w);\n        this.$i = $('.input', this.$w);\n    }\n\n    /**\n     * start\n     * Starts JS logic for the terminal\n     */\n\n\n    _createClass(Terminal, [{\n        key: 'start',\n        value: function start() {\n            this.handle();\n            this.prompt();\n            this.type('./demo');\n        }\n\n        /**\n         * handle\n         * Sets up handles for events\n         */\n\n    }, {\n        key: 'handle',\n        value: function handle() {\n            var _this = this;\n\n            $(window).on('scroll', function () {\n                _this.activeCheck();\n            });\n\n            $(window).on('resize', function (e) {\n                _this.activeCheck();\n                _this.$i.trigger('move');\n            });\n\n            $(window).on('keydown', function (e) {\n                if (!_this.$w.hasClass('active')) return;\n\n                var key = e.which;\n\n                if (key === 8 || key === 32) {\n                    e.preventDefault();\n                    _this.keyper(key);\n                } else if (key === 13) {\n                    e.preventDefault();\n                    _this.process();\n                }\n            });\n\n            $(window).on('keypress', function (e) {\n                if (!_this.$w.hasClass('active')) return;\n\n                _this.keyper(e.which);\n                _this.$i.trigger('move');\n            });\n\n            this.$i.on('move', function () {\n                _this.$i.scrollTop(_this.$i[0].scrollHeight);\n            });\n        }\n\n        /**\n         * activeCheck\n         * Checks if the current terminal window should be active\n         */\n\n    }, {\n        key: 'activeCheck',\n        value: function activeCheck() {\n            var _this2 = this;\n\n            var debounce = function debounce() {\n                var pT = _this2.$w.offset().top;\n                var pL = _this2.$w.offset().left;\n                var scroll = $(window).scrollTop();\n                var wH = $(window).height();\n                var wW = $(window).width();\n\n                if (scroll + wH > pT && scroll < pT + wH && pL < wW) {\n                    _this2.$w.addClass('active');\n                } else {\n                    _this2.$w.removeClass('active');\n                }\n            };\n\n            var diff = new Date().getTime() - this.activeChecked;\n\n            if (this.activeChecked == null || diff >= 500) {\n                this.activeChecked = new Date().getTime();\n                debounce();\n            } else {\n                clearTimeout(this.activeTimer);\n                this.activeTimer = setTimeout(debounce, 500);\n            }\n        }\n\n        /**\n         * keyper\n         * Simple handler for all input to terminal\n         *\n         * @param {Number} key - key charactor\n         */\n\n    }, {\n        key: 'keyper',\n        value: function keyper(key) {\n            var letter = String.fromCharCode(key);\n            var $line = $('> span:last-child', this.$i);\n            var $sec = $('> span:last-child', $line);\n\n            if (!$sec.hasClass('input')) {\n                $line.append('<span class=\"input\"></span>');\n                $sec = $('> span:last-child', $line);\n            }\n\n            if (key === 8) {\n                $sec.text($sec.text().slice(0, -1));\n            } else {\n                $sec.text($sec.text() + letter);\n            }\n\n            this.$i.trigger('move');\n        }\n\n        /**\n        * append\n        * Writes a new line to terminal\n        *\n        * @param {String} str - string to write to terminal (it can honestly be anything)\n        * @param {Number} time - time in miliseconds to wait before appending\n        * @returns {Object} - jQuery object of newly appended line\n        */\n\n    }, {\n        key: 'append',\n        value: function append(str) {\n            var _this3 = this;\n\n            var time = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n            if (str.substr(0, 4) !== '<span') str = '<span>' + str + '</span>';\n            var data = $(str);\n\n            return new _promise2.default(function (resolve, reject) {\n                setTimeout(function () {\n                    _this3.$i.append(data);\n                    _this3.$i.trigger('move');\n                    return resolve($('> span:last-child', _this3.$i));\n                }, time);\n            });\n        }\n\n        /**\n         * format\n         * Returns span ready for DOM appendage\n         *\n         * @param {String} str - string to write\n         * @param {Number} c - terminal color code\n         * @param {String} s - text style properties (bold)\n         * @param {String} i - additional classes to write\n         * @returns {String} - span wrapped text with color\n         */\n\n    }, {\n        key: 'format',\n        value: function format(str, c, s, i) {\n            if (this.colors[c] != null) c = this.colors[c];\n\n            var out = '<span';\n            var styles = [];\n\n            if (c != null) styles.push(['color', c]);\n\n            if (s != null && s === 'i') styles.push(['font-style', 'italic']);\n            if (s != null && s === 'b') styles.push(['font-weight', 'bold']);\n            if (s != null && s === 'u') styles.push(['text-decoration', 'underline']);\n\n            if (styles.length > 0) {\n                out += ' style=\"';\n\n                styles.forEach(function (o) {\n                    out += o[0] + ': ' + o[1] + ';';\n                });\n\n                out += '\"';\n            }\n\n            if (i != null) out += ' class=\"' + i + '\"';\n\n            out += '>' + str + '</span>';\n\n            return out;\n        }\n\n        /**\n         * prompt\n         * Prints a prompt\n         */\n\n    }, {\n        key: 'prompt',\n        value: function prompt() {\n            var folder = this.folder.replace('/home' + this.user, '~');\n            var prompt = this.format(this.user + '@' + this.host, 2, 'b') + this.format(':') + this.format(folder, 4, 'b') + this.format('$');\n\n            var title = this.folder;\n            if (this.folder === '/home/' + this.user) {\n                title = 'Home';\n            }\n            if (this.history.length > 0) {\n                var last = this.history[this.history.length - 1];\n\n                if (last.length > 30) {\n                    title += ': ' + last.split(' ')[0];\n                } else {\n                    title += ': ' + last;\n                }\n            }\n\n            $('.titlebar .title', this.$w).text(title);\n            $('.tabbar .tab.active .title', this.$w).text(title);\n            this.append('<span class=\"prompt\">' + prompt + ' </span><span class=\"input\"></span>');\n            this.$i.trigger('move');\n        }\n\n        /**\n         * process\n         * Takes user input from line and processes it\n         *\n         * @param {String} cmd - command to process\n         * @returns {Number} exit code of the ran command\n         */\n\n    }, {\n        key: 'process',\n        value: function process() {\n            var _this4 = this;\n\n            var cmd = arguments.length <= 0 || arguments[0] === undefined ? $('> span:last-child > span.input:last-of-type', this.$i).text() : arguments[0];\n\n            if (!this.$w.hasClass('active') || this.onHold) {\n                return new _promise2.default(function (resolve, reject) {\n                    setTimeout(function () {\n                        _this4.process(cmd);\n                    }, 50);\n                });\n            }\n\n            var time = new Date();\n\n            return new _promise2.default(function (resolve, reject) {\n                if (cmd == null || cmd === '') return resolve(0);\n\n                var cmds = Object.keys(_this4.commands).filter(function (reg) {\n                    var regex = new RegExp(reg.substr(1, reg.lastIndexOf('/') - 1), reg.substr(reg.lastIndexOf('/') + 1));\n                    return regex.test(cmd);\n                });\n\n                if (cmds.length < 1) return reject(-1);\n\n                _this4.history.push(cmd);\n                return resolve(_this4.commands[cmds[0]](cmd, _this4));\n            }).catch(function (code) {\n                if (code !== -1) return;\n\n                return _this4.append(cmd.split(' ')[0] + ': command not found', Math.random() * 30).then(function () {\n                    return 1;\n                });\n            }).then(function (code) {\n                var current = new Date();\n\n                if (current - time > 300) _this4.notify(_this4.history[_this4.history.length - 1]);\n\n                _this4.prompt();\n                return code;\n            });\n        }\n\n        /**\n         * notify\n         * Creates a notification\n         *\n         * @param {String} cmd - command to put on notification\n         */\n\n    }, {\n        key: 'notify',\n        value: function notify(cmd) {\n            if (!this.$w.hasClass('active')) return;\n\n            var $c = $('#notification-container');\n            var $p = $c.parent('.pantheon');\n\n            var $n = $('[type=\"notification\"]', $c);\n            $('p', $n).text(cmd);\n            $n.addClass('active');\n\n            $p.show();\n            $c.append($n);\n            $n.one('animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd', function (e) {\n                $p.hide();\n            });\n        }\n\n        /**\n         * type\n         * Types a command out in the terminal then runs it\n         *\n         * @param {String} cmd - command to type\n         * @returns {Number} exit code of the ran command\n         */\n\n    }, {\n        key: 'type',\n        value: function type(cmd) {\n            var _this5 = this;\n\n            return new _promise2.default(function (resolve, reject) {\n                var time = 0;\n\n                var _loop3 = function _loop3(i) {\n                    setTimeout(function () {\n                        _this5.keyper(cmd.charCodeAt(i));\n                    }, time);\n\n                    time += 50;\n                };\n\n                for (var i = 0; i < cmd.length; i++) {\n                    _loop3(i);\n                }\n\n                setTimeout(function () {\n                    _this5.process().then(function (c) {\n                        return resolve(c);\n                    }).catch(function (e) {\n                        return reject(e);\n                    });\n                }, time + 200);\n            });\n        }\n    }]);\n\n    return Terminal;\n}();\n\nexports.default = Terminal;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/widgets/pantheon/terminal.js\n ** module id = 47\n ** module chunks = 2\n **/\n//# sourceURL=webpack:///./_scripts/widgets/pantheon/terminal.js?")},48:function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * _scripts/widgets/showcase.js\n * A showcase slider for the elementary homepage\n *\n * @exports {Class} default - A showcase slider for the elementary homepage\n */\n\n/**\n * default\n * A showcase slider for elementary homepage.\n *\n * @param {Object} options - Showcase options.\n * @param {String} options.container - The slider container.\n * @param {String} options.index - The container holding all the choices.\n * @param {String[]} options.slides - The slider choices selectors.\n * @param {Boolean} options.fixed - Update container height based on slide.\n */\nvar Showcase = function () {\n\n    /**\n     * constructor\n     * Creates a new Showcase\n     *\n     * @param {Object} options - Showcase options\n     * @param {String} options.container - Showcase container selector\n     * @param {String} options.index - Showcase index page selector\n     * @param {String} slides[] - Selectors for each page of Showcase\n     * @param {Booleam} fixed - true if Showcase should not change size\n     */\n    function Showcase(options) {\n        _classCallCheck(this, Showcase);\n\n        this.container = options.container || '#showcase';\n        this.index = options.index || '#showcase-index';\n        this.slides = options.slides || [];\n        this.fixed = options.fixed || false;\n\n        this.current = null;\n    }\n\n    /**\n     * start\n     * Starts javascript logic for showcase\n     * NOTE: must be ran before any other functions so jQuery is loaded!\n     */\n\n\n    _createClass(Showcase, [{\n        key: 'start',\n        value: function start() {\n            var _this = this;\n\n            var _loop = function _loop() {\n                n = _this.slides[i];\n                $iChoice = $(\"[href$='\" + n + \"']\", _this.container);\n                $iContainer = $('#' + n, _this.container);\n\n\n                $iContainer.prepend('<div class=\"showcase-back\"></div>');\n\n                // each choice button\n                var that = _this;\n                $iChoice.on('click', function (e) {\n                    e.preventDefault();\n                    that.slideTo($(this).attr('href').split('#').pop()); // slide on click of button\n                });\n            };\n\n            for (var i = 0; i < this.slides.length; i++) {\n                var n;\n                var $iChoice;\n                var $iContainer;\n\n                _loop();\n            }\n\n            $(window).resize(function () {\n                return _this.resize();\n            });\n\n            $(this.container).addClass('initialized');\n            this.slideTo('index');\n\n            // Listen for some cool mobile touch gestures\n            var touchStartX = null;\n            var touchStartY = null;\n\n            $(document).on('touchstart', this.container, function (e) {\n                touchStartX = e.touches[0].pageX;\n                touchStartY = e.touches[0].pageY;\n            });\n\n            $(document).on('touchend', function (e) {\n                var touchEndX = e.changedTouches[e.changedTouches.length - 1].pageX;\n                var touchEndY = e.changedTouches[e.changedTouches.length - 1].pageY;\n\n                var movementX = touchEndX - touchStartX;\n                var movementY = touchEndY - touchStartY;\n\n                if (Math.abs(movementY) < movementX / 3 && movementX > 100) {\n                    _this.slideTo('index');\n                }\n\n                touchStartX = null;\n                touchStartY = null;\n            });\n        }\n\n        /**\n         * slideTo\n         * Slides to a specific slide\n         *\n         * @param {String} rSlide - the ID of the requested slide\n         */\n\n    }, {\n        key: 'slideTo',\n        value: function slideTo(rSlide) {\n            if (rSlide !== 'index' && this.slides.indexOf(rSlide) === -1) {\n                // could not find requested slide\n                return console.error(\"could not find requested slide '\" + rSlide + \"'\"); // log an error\n            }\n\n            if (rSlide === 'index') {\n                $(this.index, this.container).addClass('active');\n            } else {\n                $(this.index, this.container).removeClass('active');\n            }\n\n            // iterates through slides based on this.slides\n            for (var i = 0; i < this.slides.length; i++) {\n                var n = this.slides[i];\n                var $n = $('#' + n, this.container); // current iterated slide\n\n                if (n === rSlide) {\n                    // if correct slide\n                    $n.addClass('active');\n                } else {\n                    $n.removeClass('active');\n                }\n            }\n\n            this.current = rSlide;\n            $(this.container).trigger('change', {\n                active: rSlide\n            });\n\n            if (this.current !== 'index') {\n                $('body').animate({\n                    scrollTop: $(this.container).offset().top\n                }, 100);\n            }\n\n            this.resize(); // resize the container\n        }\n\n        /**\n         * resize\n         * Reset height of container\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize() {\n            var height = 0;\n\n            if (this.fixed) {\n                // if the container should be a fixed height\n                height = $(this.index, this.container).outerHeight(true);\n\n                // iterates through slides\n                $.each(this.slides, function (i, n) {\n                    var $iSlide = $('#' + n, this.container); // current iterated slide\n\n                    if ($iSlide.outerHeight(true) > height) {\n                        // new tallest slide\n                        height = $iSlide.outerHeight(true);\n                    }\n                });\n\n                $(this.container).height(height); // set fixed height\n            } else {\n                // resize container based on slide\n                if (this.current === 'index') {\n                    height = $(this.index, this.container).outerHeight(true);\n                } else {\n                    height = $('#' + this.current, this.container).outerHeight(true);\n                }\n\n                $(this.container).height(height); // set height\n            }\n        }\n    }]);\n\n    return Showcase;\n}();\n\nexports.default = Showcase;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/widgets/showcase.js\n ** module id = 48\n ** module chunks = 2\n **/\n//# sourceURL=webpack:///./_scripts/widgets/showcase.js?")}});