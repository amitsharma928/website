webpackJsonp([10],[function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /**\nscripts/store/cart.js\noes update logic for cart quantities and some basic address validation\nn\nvar _promise = __webpack_require__(2);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _analytics = __webpack_require__(13);\n\nvar _analytics2 = _interopRequireDefault(_analytics);\n\nvar _jquery = __webpack_require__(1);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_promise2.default.all([_jquery2.default, _analytics2.default]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var $ = _ref2[0];\n    var ga = _ref2[1];\n\n    ga('send', 'event', 'Store', 'Cart Visit');\n\n    $(document).ready(function () {\n        var baseUrl = $('base').attr('href');\n        var country = {};\n\n        if (typeof window.country !== 'undefined') {\n            country = window.country;\n        } else if (Object.keys(country).length === 0) {\n            console.error('Unable to find country data');\n\n            $.getJSON(baseUrl + 'data/country.json', function (data) {\n                console.log('Was able to fetch country data manually');\n\n                country = data;\n            });\n        }\n\n        /**\n         * updateTotal\n         * Adds prices for everything in cart and puts sub total in footer\n         */\n        var updateTotal = function updateTotal() {\n            var $products = $('.list--product .list__item');\n\n            if ($products.length <= 0) location.reload();\n\n            var total = 0;\n\n            $products.each(function (i, p) {\n                var n = $(p).attr('id').replace('product-', '');\n                var $i = $('.list__item#product-' + n);\n\n                var price = $('input[name$=\"price\"]', $i).val();\n                var quantity = $('input[name$=\"quantity\"]', $i).val();\n\n                var t = price * quantity;\n                $('.subtotal b', $i).text('$' + parseFloat(t).toFixed(2));\n\n                total += t;\n            });\n\n            $('.list--product .list__footer h4').text('Sub-Total: $' + parseFloat(total).toFixed(2));\n        };\n\n        /**\n         * POSTs to inventory endpoint to update cart quantities without page refresh\n         */\n        $('.list--product .list__item input[name$=\"quantity\"]').on('change', function (e) {\n            try {\n                if (!$(this)[0].checkValidity || !$(this)[0].checkValidity()) return;\n            } catch (err) {\n                console.error('You have a really old browser...');\n            }\n\n            var $input = $(this);\n            var $item = $input.closest('.list__item');\n\n            var id = $item.attr('id').replace('product-', '').split('-');\n            var productId = id[0];\n            var variantId = id[1];\n\n            var quantity = $input.val();\n            var $error = $item.find('.alert--error');\n\n            $.get(baseUrl + 'store/inventory', {\n                id: productId,\n                variant: variantId,\n                quantity: quantity,\n                math: 'set',\n                simple: true\n            }).done(function (data) {\n                if (data === 'OK') {\n                    $error.text('');\n\n                    if (quantity <= 0) $item.remove();\n\n                    updateTotal();\n                } else {\n                    console.error('Unable to update cart quantity');\n                    console.error(data);\n                    $error.text('Unable to update quantity');\n                }\n            });\n        });\n\n        /**\n         * Hide the inputs we don't need depending on the country\n         * NOTE: JQuery in a loop does not work as intended :sad_face:\n         */\n        $('form[action$=\"checkout\"] select[name=\"country\"]').on('change', function (e) {\n            var value = $(this).val();\n            var $state = $(this).siblings('select[name=\"state\"]');\n            var $statelabel = $(this).siblings('label[for=\"state\"]');\n\n            ga('send', 'event', 'Cart', 'Country Change', value);\n\n            if (country[value] != null && _typeof(country[value]['states']) === 'object') {\n                $state.empty();\n                var options = [];\n\n                Object.keys(country[value]['states']).forEach(function (code) {\n                    var state = country[value]['states'][code];\n                    options.push('<option value=\"' + code + '\">' + state + '</option>');\n                });\n\n                $state.append(options.join(''));\n                $state.show().attr('required', true);\n                $statelabel.show().attr('required', true);\n            } else {\n                $state.hide().attr('required', false);\n                $statelabel.hide().attr('required', false);\n            }\n        });\n    });\n});\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/store/cart.js\n ** module id = 0\n ** module chunks = 10\n **/\n//# sourceURL=webpack:///./_scripts/store/cart.js?")}]);