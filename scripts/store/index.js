webpackJsonp([5],{0:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * scripts/store/index.js\noes logic for picking product variants and adding to cart\nn\nvar _promise = __webpack_require__(2);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _analytics = __webpack_require__(13);\n\nvar _analytics2 = _interopRequireDefault(_analytics);\n\nvar _jquery = __webpack_require__(1);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modal = __webpack_require__(19);\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_promise2.default.all([_analytics2.default, _jquery2.default, _modal2.default]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var ga = _ref2[0];\n    var $ = _ref2[1];\n\n    ga('send', 'event', 'Store', 'Store Visit');\n\n    $('document').ready(function () {\n        var baseUrl = $('base').attr('href');\n        var products = [];\n\n        if (typeof window.products !== 'undefined') {\n            products = window.products;\n        } else if (products.length === 0) {\n            console.error('Unable to find store data');\n\n            $.getJSON(baseUrl + 'data/store.json', function (data) {\n                console.log('Was able to fetch store data manually');\n\n                products = data;\n            });\n        }\n\n        /**\n         * Opens product modal on image click\n         */\n        $('.grid--product .grid__item *').on('click', function (e) {\n            if (e.target !== this) return;\n\n            var $item = $(this).closest('.grid__item');\n            if ($item.attr('id').indexOf('product') === -1) return;\n\n            e.preventDefault();\n\n            var $trigger = $item.find('.open-modal');\n\n            $trigger.leanModal({\n                top: '5vh',\n                overlayOpacity: 0.5,\n                closeButton: '.close-modal'\n            });\n            $trigger.click();\n\n            ga('send', 'event', 'Store', 'View Product', $item.data('product-name'));\n        });\n\n        /**\n         * updateVariant\n         * Updates a modal with new variant data\n         *\n         * @param {Object} $f - the jQuery form to update\n         * @param {Object} p - the product object\n         * @param {Object} v - the variant object\n         *\n         * @return {Void}\n         */\n        var updateVariant = function updateVariant($f, p, v) {\n            var $m = $f.closest('.modal');\n\n            // Update price information\n            $f.find('input[name=\"variant\"]').val(v['id']);\n            $m.find('.modal__price').text('$' + parseFloat(v['price']).toFixed(2));\n\n            if (v['image'] != null) {\n                $m.find('img').prop('src', v['image']);\n            } else {\n                $m.find('img').prop('src', p['image']);\n            }\n\n            // Update modal information\n            setValue($f, 'size', v['size']);\n            setValue($f, 'color', v['color']);\n        };\n\n        /**\n         * getValue\n         * Returns the current value of X in the form\n         * NOTE: currently only supports buttons and select elements\n         *\n         * @param {Object} $f - the jQuery form to look in\n         * @param {String} n - the name of the value to lookup\n         *\n         * @return {String} - the value of n\n         */\n        var getValue = function getValue($f, n) {\n            var $b = $f.find('button[name=' + n + ']');\n\n            if ($b.length) {\n                return $b.filter('.checked').val();\n            } else {\n                return $f.find('select[name=' + n + ']').val();\n            }\n        };\n\n        /**\n         * setValue\n         * Sets the value of X in the form\n         * NOTE: currently only supports buttons and select elements\n         *\n         * @param {Object} $f - the jQuery form to look in\n         * @param {String} n - the name of the value to change\n         * @param {String} v - the value to change it to\n         *\n         * @return {Void}\n         */\n        var setValue = function setValue($f, n, v) {\n            var $i = $f.find('input[name=' + n + ']');\n            var $s = $f.find('select[name=' + n + ']');\n            var $b = $i.siblings('button.target-amount');\n\n            $i.val(v);\n            $s.val(v);\n\n            if ($b.length) {\n                $b.removeClass('checked');\n                $b.filter('[value=\"' + v + '\"]').addClass('checked');\n            }\n        };\n\n        /**\n         * updateInfo\n         * Updates the product modal based on new user input\n         *\n         * @param {Object} $f - the jQuery object of the form\n         * @param {String} t - type of input that changed (color, size, etc)\n         * @param {String} v - new value of input\n         *\n         * @return {Void}\n         */\n        var updateInfo = function updateInfo($f, t, v) {\n            var $id = $f.find('input[name=\"id\"]');\n\n            var id = Number($id.val());\n            var size = getValue($f, 'size');\n            var color = getValue($f, 'color');\n\n            if (t === 'size') {\n                size = v;\n            } else if (t === 'color') {\n                color = v;\n            } else {\n                throw new Error('Unable to use updateInfo on anything besides size or color');\n            }\n\n            var p = null;\n            for (var pi in products) {\n                if (products[pi]['id'] !== id) continue;\n                p = products[pi];\n            }\n\n            if (p == null) {\n                $('.alert--error', $f).text('Unable to find product');\n                $('input[type=\"submit\"]', $f).prop('disabled', true);\n                return;\n            }\n\n            for (var i in p['variants']) {\n                var variant = p['variants'][i];\n\n                if (size != null && variant['size'] !== size) continue;\n                if (color != null && variant['color'] !== color) continue;\n\n                updateVariant($f, p, variant);\n\n                $('.alert--error', $f).text('');\n                $('input[type=\"submit\"]', $f).prop('disabled', false);\n\n                return;\n            }\n\n            $('.alert--error', $f).text('Unable to find variant');\n            $('input[type=\"submit\"]', $f).prop('disabled', true);\n        };\n\n        /**\n         * Handles button selection input and switching\n         */\n        $('.modal--product form[action$=\"inventory\"] button.target-amount').on('click', function (e) {\n            e.preventDefault();\n\n            var $input = $(this).siblings('input');\n\n            var $form = $(this).closest('form');\n            var type = $input.attr('name');\n            var value = $(this).attr('value');\n\n            updateInfo($form, type, value);\n        });\n\n        /**\n         * Updates product variance based on user input (size, color, etc)\n         */\n        $('.modal--product form[action$=\"inventory\"] select').on('change', function (e) {\n            e.preventDefault();\n\n            var $form = $(this).closest('form');\n            var type = $(this).attr('name');\n            var value = $(this).val();\n\n            updateInfo($form, type, value);\n        });\n    });\n});\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/store/index.js\n ** module id = 0\n ** module chunks = 5\n **/\n//# sourceURL=webpack:///./_scripts/store/index.js?")},19:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _promise = __webpack_require__(2);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _scriptjs = __webpack_require__(5);\n\nvar _scriptjs2 = _interopRequireDefault(_scriptjs);\n\nvar _jquery = __webpack_require__(1);\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _jquery2.default.then(function ($) {\n    return new _promise2.default(function (resolve, reject) {\n        (0, _scriptjs2.default)('https://cdn.jsdelivr.net/g/jquery.leanmodal2@2.5', function () {\n            console.log('jQuery.leanModal2 loaded');\n            return resolve(window.jQuery);\n        });\n    });\n}); /**\n     * _scripts/lib/modal.js\n     * Loads jQuery.leanModal2 from cdn address\n     *\n     * @exports {Promise} default - a promise of the jQuery with jQuery.leanModal2 loaded\n     */\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scripts/lib/modal.js\n ** module id = 19\n ** module chunks = 3 5\n **/\n//# sourceURL=webpack:///./_scripts/lib/modal.js?")}});